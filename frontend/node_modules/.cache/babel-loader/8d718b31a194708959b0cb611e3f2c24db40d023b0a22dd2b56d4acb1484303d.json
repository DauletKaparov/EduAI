{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8003';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  // Handle 401 Unauthorized errors (token expired)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login?expired=true';\n  }\n  return Promise.reject(error);\n});\n\n// Auth endpoints\nexport const authAPI = {\n  login: (username, password) => {\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    return api.post('/api/auth/token', formData);\n  },\n  register: userData => api.post('/api/auth/register', userData),\n  getCurrentUser: () => api.get('/api/auth/me')\n};\n\n// Subject endpoints\nexport const subjectsAPI = {\n  getAll: () => api.get('/api/subjects'),\n  getById: id => api.get(`/api/subjects/${id}`)\n};\n\n// Topic endpoints\nexport const topicsAPI = {\n  getAll: subjectId => {\n    const params = subjectId ? {\n      subject_id: subjectId\n    } : {};\n    return api.get('/api/topics', {\n      params\n    });\n  },\n  getById: id => api.get(`/api/topics/${id}`)\n};\n\n// Content endpoints\nexport const contentsAPI = {\n  getByTopic: (topicId, contentType) => {\n    const params = {\n      topic_id: topicId\n    };\n    if (contentType) {\n      Object.assign(params, {\n        content_type: contentType\n      });\n    }\n    return api.get('/api/contents', {\n      params\n    });\n  },\n  getById: id => api.get(`/api/contents/${id}`)\n};\n\n// User endpoints\nexport const usersAPI = {\n  updateProfile: data => api.put('/api/users/me', data),\n  getProgress: () => api.get('/api/users/me/progress'),\n  updateProgress: progressData => api.post('/api/users/me/progress', progressData)\n};\n\n// AI Generator endpoints\nexport const generatorAPI = {\n  generateStudySheet: topicId => api.get(`/api/test/studysheet/${topicId}`),\n  // New function to fetch an existing study sheet without regenerating it\n  fetchStudySheet: topicId => api.get(`/api/test/studysheet/${topicId}?fetch_only=true`),\n  generateQuestions: (topicId, numQuestions = 5) => api.post('/api/generate/questions', {\n    topic_id: topicId,\n    num_questions: numQuestions\n  }),\n  getRecommendations: (topicId, limit = 5) => {\n    const params = {\n      limit\n    };\n    if (topicId) {\n      Object.assign(params, {\n        topic_id: topicId\n      });\n    }\n    return api.post('/api/generate/recommendations', params);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authAPI","login","username","password","formData","FormData","append","post","register","userData","getCurrentUser","get","subjectsAPI","getAll","getById","id","topicsAPI","subjectId","params","subject_id","contentsAPI","getByTopic","topicId","contentType","topic_id","Object","assign","content_type","usersAPI","updateProfile","data","put","getProgress","updateProgress","progressData","generatorAPI","generateStudySheet","fetchStudySheet","generateQuestions","numQuestions","num_questions","getRecommendations","limit"],"sources":["/Users/dauletkaparov/Desktop/MVP2/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8003';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired)\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login?expired=true';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth endpoints\nexport const authAPI = {\n  login: (username: string, password: string) => {\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    return api.post('/api/auth/token', formData);\n  },\n  register: (userData: any) => api.post('/api/auth/register', userData),\n  getCurrentUser: () => api.get('/api/auth/me'),\n};\n\n// Subject endpoints\nexport const subjectsAPI = {\n  getAll: () => api.get('/api/subjects'),\n  getById: (id: string) => api.get(`/api/subjects/${id}`),\n};\n\n// Topic endpoints\nexport const topicsAPI = {\n  getAll: (subjectId?: string) => {\n    const params = subjectId ? { subject_id: subjectId } : {};\n    return api.get('/api/topics', { params });\n  },\n  getById: (id: string) => api.get(`/api/topics/${id}`),\n};\n\n// Content endpoints\nexport const contentsAPI = {\n  getByTopic: (topicId: string, contentType?: string) => {\n    const params = { topic_id: topicId };\n    if (contentType) {\n      Object.assign(params, { content_type: contentType });\n    }\n    return api.get('/api/contents', { params });\n  },\n  getById: (id: string) => api.get(`/api/contents/${id}`),\n};\n\n// User endpoints\nexport const usersAPI = {\n  updateProfile: (data: any) => api.put('/api/users/me', data),\n  getProgress: () => api.get('/api/users/me/progress'),\n  updateProgress: (progressData: any) => api.post('/api/users/me/progress', progressData),\n};\n\n// AI Generator endpoints\nexport const generatorAPI = {\n  generateStudySheet: (topicId: string) => \n    api.get(`/api/test/studysheet/${topicId}`),\n  // New function to fetch an existing study sheet without regenerating it\n  fetchStudySheet: (topicId: string) =>\n    api.get(`/api/test/studysheet/${topicId}?fetch_only=true`),\n  generateQuestions: (topicId: string, numQuestions: number = 5) => \n    api.post('/api/generate/questions', { topic_id: topicId, num_questions: numQuestions }),\n  getRecommendations: (topicId?: string, limit: number = 5) => {\n    const params = { limit };\n    if (topicId) {\n      Object.assign(params, { topic_id: topicId });\n    }\n    return api.post('/api/generate/recommendations', params);\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}