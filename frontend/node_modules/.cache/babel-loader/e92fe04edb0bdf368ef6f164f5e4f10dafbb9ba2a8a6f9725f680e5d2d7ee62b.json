{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8003';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  // Handle 401 Unauthorized errors (token expired)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login?expired=true';\n  }\n  return Promise.reject(error);\n});\n\n// Auth endpoints\nexport const authAPI = {\n  login: (username, password) => {\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    return api.post('/api/auth/token', formData);\n  },\n  register: userData => api.post('/api/auth/register', userData),\n  getCurrentUser: () => api.get('/api/auth/me')\n};\n\n// Subject endpoints\nexport const subjectsAPI = {\n  getAll: () => api.get('/api/subjects'),\n  getById: id => api.get(`/api/subjects/${id}`)\n};\n\n// Topic endpoints\nexport const topicsAPI = {\n  getAll: subjectId => {\n    const params = subjectId ? {\n      subject_id: subjectId\n    } : {};\n    return api.get('/api/topics', {\n      params\n    });\n  },\n  getById: id => api.get(`/api/topics/${id}`)\n};\n\n// Content endpoints\nexport const contentsAPI = {\n  getByTopic: (topicId, contentType) => {\n    const params = {\n      topic_id: topicId\n    };\n    if (contentType) {\n      Object.assign(params, {\n        content_type: contentType\n      });\n    }\n    return api.get('/api/contents', {\n      params\n    });\n  },\n  getById: id => api.get(`/api/contents/${id}`)\n};\n\n// User endpoints\nexport const usersAPI = {\n  updateProfile: data => api.put('/api/users/me', data),\n  getProgress: () => api.get('/api/users/me/progress'),\n  updateProgress: progressData => api.post('/api/users/me/progress', progressData)\n};\n\n// Helper function for retry logic\nconst withRetry = async (fn, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      console.warn(`Attempt ${attempt + 1}/${maxRetries} failed:`, error);\n      lastError = error;\n      if (attempt < maxRetries - 1) {\n        // Wait before next retry with exponential backoff\n        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, attempt)));\n      }\n    }\n  }\n  throw lastError;\n};\n\n// AI Generator endpoints with enhanced error handling and retry logic\nexport const generatorAPI = {\n  generateStudySheet: async topicId => {\n    try {\n      // First try the test endpoint with retry logic\n      return await withRetry(() => api.get(`/api/test/studysheet/${topicId}`));\n    } catch (error) {\n      console.error('Failed to generate study sheet with test endpoint:', error);\n\n      // As a fallback, try direct fetch with no auth\n      try {\n        const directResponse = await fetch(`${API_URL}/api/test/studysheet/${topicId}`);\n        if (!directResponse.ok) {\n          throw new Error(`Direct API call failed with status: ${directResponse.status}`);\n        }\n        const data = await directResponse.json();\n        return {\n          status: 200,\n          data\n        };\n      } catch (directError) {\n        console.error('Direct API call also failed:', directError);\n        throw new Error('All attempts to generate study sheet failed');\n      }\n    }\n  },\n  // Fetch an existing study sheet without regenerating it\n  fetchStudySheet: async topicId => {\n    try {\n      // First try with fetch_only parameter\n      return await withRetry(() => api.get(`/api/test/studysheet/${topicId}?fetch_only=true`));\n    } catch (error) {\n      console.error('Failed to fetch existing study sheet:', error);\n\n      // As a fallback, try without fetch_only parameter\n      try {\n        console.log('Trying fallback without fetch_only parameter');\n        return await api.get(`/api/test/studysheet/${topicId}`);\n      } catch (fallbackError) {\n        console.error('Fallback attempt also failed:', fallbackError);\n\n        // Last resort: direct fetch\n        try {\n          const directResponse = await fetch(`${API_URL}/api/test/studysheet/${topicId}`);\n          if (!directResponse.ok) {\n            throw new Error(`Direct API call failed with status: ${directResponse.status}`);\n          }\n          const data = await directResponse.json();\n          return {\n            status: 200,\n            data\n          };\n        } catch (directError) {\n          console.error('All fetch attempts failed:', directError);\n          throw new Error('Unable to retrieve study sheet');\n        }\n      }\n    }\n  },\n  generateQuestions: (topicId, numQuestions = 5) => withRetry(() => api.post('/api/generate/questions', {\n    topic_id: topicId,\n    num_questions: numQuestions\n  })),\n  getRecommendations: (topicId, limit = 5) => {\n    const params = {\n      limit\n    };\n    if (topicId) {\n      Object.assign(params, {\n        topic_id: topicId\n      });\n    }\n    return withRetry(() => api.post('/api/generate/recommendations', params));\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authAPI","login","username","password","formData","FormData","append","post","register","userData","getCurrentUser","get","subjectsAPI","getAll","getById","id","topicsAPI","subjectId","params","subject_id","contentsAPI","getByTopic","topicId","contentType","topic_id","Object","assign","content_type","usersAPI","updateProfile","data","put","getProgress","updateProgress","progressData","withRetry","fn","maxRetries","delay","lastError","attempt","console","warn","resolve","setTimeout","Math","pow","generatorAPI","generateStudySheet","directResponse","fetch","ok","Error","json","directError","fetchStudySheet","log","fallbackError","generateQuestions","numQuestions","num_questions","getRecommendations","limit"],"sources":["/Users/dauletkaparov/Desktop/MVP2/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8003';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired)\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login?expired=true';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth endpoints\nexport const authAPI = {\n  login: (username: string, password: string) => {\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    return api.post('/api/auth/token', formData);\n  },\n  register: (userData: any) => api.post('/api/auth/register', userData),\n  getCurrentUser: () => api.get('/api/auth/me'),\n};\n\n// Subject endpoints\nexport const subjectsAPI = {\n  getAll: () => api.get('/api/subjects'),\n  getById: (id: string) => api.get(`/api/subjects/${id}`),\n};\n\n// Topic endpoints\nexport const topicsAPI = {\n  getAll: (subjectId?: string) => {\n    const params = subjectId ? { subject_id: subjectId } : {};\n    return api.get('/api/topics', { params });\n  },\n  getById: (id: string) => api.get(`/api/topics/${id}`),\n};\n\n// Content endpoints\nexport const contentsAPI = {\n  getByTopic: (topicId: string, contentType?: string) => {\n    const params = { topic_id: topicId };\n    if (contentType) {\n      Object.assign(params, { content_type: contentType });\n    }\n    return api.get('/api/contents', { params });\n  },\n  getById: (id: string) => api.get(`/api/contents/${id}`),\n};\n\n// User endpoints\nexport const usersAPI = {\n  updateProfile: (data: any) => api.put('/api/users/me', data),\n  getProgress: () => api.get('/api/users/me/progress'),\n  updateProgress: (progressData: any) => api.post('/api/users/me/progress', progressData),\n};\n\n// Helper function for retry logic\nconst withRetry = async (fn: () => Promise<any>, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      console.warn(`Attempt ${attempt + 1}/${maxRetries} failed:`, error);\n      lastError = error;\n      if (attempt < maxRetries - 1) {\n        // Wait before next retry with exponential backoff\n        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, attempt)));\n      }\n    }\n  }\n  throw lastError;\n};\n\n// AI Generator endpoints with enhanced error handling and retry logic\nexport const generatorAPI = {\n  generateStudySheet: async (topicId: string) => {\n    try {\n      // First try the test endpoint with retry logic\n      return await withRetry(() => api.get(`/api/test/studysheet/${topicId}`));\n    } catch (error) {\n      console.error('Failed to generate study sheet with test endpoint:', error);\n      \n      // As a fallback, try direct fetch with no auth\n      try {\n        const directResponse = await fetch(`${API_URL}/api/test/studysheet/${topicId}`);\n        if (!directResponse.ok) {\n          throw new Error(`Direct API call failed with status: ${directResponse.status}`);\n        }\n        const data = await directResponse.json();\n        return { status: 200, data };\n      } catch (directError) {\n        console.error('Direct API call also failed:', directError);\n        throw new Error('All attempts to generate study sheet failed');\n      }\n    }\n  },\n  \n  // Fetch an existing study sheet without regenerating it\n  fetchStudySheet: async (topicId: string) => {\n    try {\n      // First try with fetch_only parameter\n      return await withRetry(() => api.get(`/api/test/studysheet/${topicId}?fetch_only=true`));\n    } catch (error) {\n      console.error('Failed to fetch existing study sheet:', error);\n      \n      // As a fallback, try without fetch_only parameter\n      try {\n        console.log('Trying fallback without fetch_only parameter');\n        return await api.get(`/api/test/studysheet/${topicId}`);\n      } catch (fallbackError) {\n        console.error('Fallback attempt also failed:', fallbackError);\n        \n        // Last resort: direct fetch\n        try {\n          const directResponse = await fetch(`${API_URL}/api/test/studysheet/${topicId}`);\n          if (!directResponse.ok) {\n            throw new Error(`Direct API call failed with status: ${directResponse.status}`);\n          }\n          const data = await directResponse.json();\n          return { status: 200, data };\n        } catch (directError) {\n          console.error('All fetch attempts failed:', directError);\n          throw new Error('Unable to retrieve study sheet');\n        }\n      }\n    }\n  },\n  \n  generateQuestions: (topicId: string, numQuestions: number = 5) => \n    withRetry(() => api.post('/api/generate/questions', { topic_id: topicId, num_questions: numQuestions })),\n    \n  getRecommendations: (topicId?: string, limit: number = 5) => {\n    const params = { limit };\n    if (topicId) {\n      Object.assign(params, { topic_id: topicId });\n    }\n    return withRetry(() => api.post('/api/generate/recommendations', params));\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}